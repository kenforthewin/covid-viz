{"version":3,"sources":["App.js","index.js"],"names":["App","React","Component","constructor","super","this","state","loading","db","err","results","states","counties","stateValue","countyValue","componentDidMount","initSqlJs","then","SQL","setState","Database","syncData","catch","exec","d3Fetch","data","i","j","length","strValues","slice","map","d","date","county","fips","cases","deaths","join","q","values","qFromSelects","inputDebounce","sql","setUrl","clearTimeout","debounce","setTimeout","e","encodeURIComponent","window","history","replaceState","handleStateChange","event","value","target","handleCountyChange","whereClause","graphSelector","onChange","s","graphData","columns","width","height","xIndex","indexOf","yIndex","numTicksForHeight","numTicksForWidth","parseDate","d3Time","x","y","xMax","yMax","xScale","scaleTime","range","domain","extent","yScale","scaleLinear","max","fill","rx","Grid","top","left","stroke","numTicksRows","numTicksColumns","Group","key","LinePath","strokeWidth","curve","curveMonotoneX","AxisLeft","scale","hideZero","numTicks","label","labelProps","textAnchor","fontSize","fontFamily","tickStroke","tickLabelProps","index","dx","dy","tickComponent","formattedValue","tickProps","AxisBottom","axis","axisCenter","axisToPoint","axisFromPoint","className","ticks","tick","tickX","to","tickY","tickLength","Line","from","transform","renderResult","truncated","columnName","row","render","queryString","parse","location","search","toString","ParentSize","w","h","rootElement","document","getElementById","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.8442a0e8.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./styles.css\";\nimport initSqlJs from \"sql.js\";\nimport * as d3Fetch from \"d3-fetch\";\nimport queryString from \"query-string\";\nimport { Group } from \"@vx/group\";\nimport { Grid } from \"@vx/grid\";\nimport { AxisLeft, AxisBottom } from \"@vx/axis\";\nimport { LinePath, Line } from \"@vx/shape\";\nimport { curveMonotoneX } from \"@vx/curve\";\nimport { scaleTime, scaleLinear } from \"@vx/scale\";\nimport { ParentSize } from \"@vx/responsive\";\n\nimport { extent, max, min } from \"d3-array\";\nimport * as d3Time from \"d3-time-format\";\n\nexport default class App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      loading: true,\n      db: null,\n      err: null,\n      results: null,\n      states: [],\n      counties: [],\n      stateValue: \"USA (all states)\",\n      countyValue: null\n    };\n  }\n\n  componentDidMount() {\n    // sql.js needs to fetch its wasm file, so we cannot immediately instantiate the database\n    // without any configuration, initSqlJs will fetch the wasm files directly from the same path as the js\n    // see ../config-overrides.js\n\n    initSqlJs()\n      .then(SQL => {\n        this.setState({ db: new SQL.Database() }, () => {\n          this.syncData();\n        });\n      })\n      .catch(err => this.setState({ err }));\n  }\n\n  syncData() {\n    this.exec(\"DROP TABLE IF EXISTS covid_counties;\");\n    this.exec(\n      \"CREATE TABLE covid_counties (date TEXT, county TEXT, state TEXT, fips INTEGER, cases INTEGER, deaths INTEGER);\"\n    );\n\n    d3Fetch\n      .csv(\n        \"https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv\"\n      )\n      .then(data => {\n        let chunk = 100;\n        for (let i = 0, j = data.length; i < j; i += chunk) {\n          let values = data\n            .slice(i, i + chunk)\n            .map(\n              d =>\n                `(\"${d.date}\",\"${d.county}\",\"${d.state}\",${d.fips || 0},${\n                  d.cases\n                },${d.deaths})`\n            );\n\n          let strValues = values.join(\",\\n\");\n          let q = `INSERT INTO covid_counties (date, county, state, fips, cases, deaths)\\nVALUES\\n${strValues};`;\n          this.exec(q);\n        }\n\n        let results = this.state.db.exec(\n          \"SELECT DISTINCT state FROM covid_counties ORDER BY state\"\n        );\n        let states = results[0].values;\n\n        this.setState({ loading: false, states });\n        // const parsed = queryString.parse(window.location.search);\n        // if (parsed[\"q\"]) {\n        //   this.exec(parsed[\"q\"]);\n        // } else {\n\n        // }\n        this.qFromSelects();\n      });\n  }\n\n  inputDebounce(sql, setUrl = false) {\n    clearTimeout(this.debounce);\n    this.debounce = setTimeout(() => {\n      this.exec(sql, setUrl);\n    }, 500);\n  }\n\n  exec(sql, setUrl = false) {\n    let results = null,\n      err = null;\n    try {\n      // The sql is executed synchronously on the UI thread.\n      // You may want to use a web worker\n      results = this.state.db.exec(sql); // an array of objects is returned\n    } catch (e) {\n      // exec throws an error when the SQL statement is invalid\n      err = e;\n    }\n    this.setState({ results, err }, () => {\n      if (setUrl) {\n        let q = encodeURIComponent(sql);\n        window.history.replaceState(null, \"\", `?q=${q}`);\n      }\n    });\n  }\n\n  handleStateChange(event) {\n    let counties = [];\n    let value = event.target.value;\n    if (value !== \"USA (all states)\") {\n      let results = this.state.db.exec(\n        `SELECT DISTINCT county FROM covid_counties WHERE state=\"${value}\" ORDER BY county`\n      );\n      counties = results[0].values;\n    }\n    this.setState(\n      {\n        stateValue: event.target.value,\n        counties,\n        countyValue: \"All (entire state)\"\n      },\n      () => {\n        this.qFromSelects();\n      }\n    );\n  }\n\n  handleCountyChange(event) {\n    let value = event.target.value;\n    this.setState({ countyValue: event.target.value }, () => {\n      this.qFromSelects();\n    });\n  }\n\n  qFromSelects() {\n    let whereClause = \"\";\n    if (this.state.stateValue !== \"USA (all states)\") {\n      whereClause = `WHERE state=\"${this.state.stateValue}\" `;\n      if (this.state.countyValue !== \"All (entire state)\") {\n        whereClause += `AND county=\"${this.state.countyValue}\"`;\n      }\n    }\n    let q = `SELECT date, SUM(cases) AS cases FROM covid_counties ${whereClause} GROUP BY (date)`;\n    this.exec(q);\n  }\n\n  graphSelector() {\n    return (\n      <div>\n        <select\n          value={this.state.stateValue}\n          onChange={e => this.handleStateChange(e)}\n        >\n          <option value=\"USA (all states)\">USA (all states)</option>\n          {this.state.states.map(s => (\n            <option value={s}>{s}</option>\n          ))}\n        </select>\n        <select\n          value={this.state.countyValue}\n          onChange={e => this.handleCountyChange(e)}\n        >\n          {this.state.stateValue !== \"USA (all states)\" && (\n            <option value=\"All (entire state)\">All (entire state)</option>\n          )}\n          {this.state.counties.map(s => (\n            <option value={s}>{s}</option>\n          ))}\n        </select>\n      </div>\n    );\n  }\n\n  graphData({ columns, values }, width, height) {\n    if (values.length > 10000) {\n      return null;\n    }\n    // console.log(values);\n    const xIndex = columns.indexOf(\"date\");\n    if (xIndex === -1) {\n      return <div>Add a `date` and `cases` column to graph the results.</div>;\n    }\n    const yIndex = columns.indexOf(\"cases\");\n    if (yIndex === -1) {\n      return <div>Add a `date` and `cases` column to graph the results.</div>;\n    }\n\n    // responsive utils for axis ticks\n    function numTicksForHeight(height) {\n      if (height <= 300) return 3;\n      if (300 < height && height <= 600) return 5;\n      return 10;\n    }\n\n    function numTicksForWidth(width) {\n      if (width <= 300) return 2;\n      if (300 < width && width <= 400) return 5;\n      return 10;\n    }\n\n    const parseDate = d3Time.timeParse(\"%Y-%m-%d\");\n    const x = d => parseDate(d[xIndex]);\n    const y = d => d[yIndex];\n    // bounds\n    const margin = 60;\n    const xMax = width - margin - margin;\n    const yMax = height - margin - margin;\n    // scales\n    const xScale = scaleTime({\n      range: [0, xMax],\n      domain: extent(values, x)\n    });\n    const yScale = scaleLinear({\n      range: [yMax, 0],\n      domain: [0, max(values, y)]\n    });\n    return (\n      <svg width={width} height={height}>\n        <rect\n          x={0}\n          y={0}\n          width={width}\n          height={height}\n          fill=\"#242424\"\n          rx={14}\n        />\n        <Grid\n          top={margin}\n          left={margin}\n          xScale={xScale}\n          yScale={yScale}\n          stroke=\"rgb(102, 102, 102)\"\n          width={xMax}\n          height={yMax}\n          numTicksRows={numTicksForHeight(height)}\n          numTicksColumns={numTicksForWidth(width)}\n        />\n        <Group key={`lines-1`} top={margin} left={margin}>\n          <LinePath\n            data={values}\n            x={d => xScale(x(d))}\n            y={d => yScale(y(d))}\n            stroke={\"#ffffff\"}\n            strokeWidth={2}\n            curve={curveMonotoneX}\n          />\n        </Group>\n        <Group left={margin}>\n          <AxisLeft\n            top={margin}\n            left={0}\n            scale={yScale}\n            hideZero\n            numTicks={numTicksForHeight(height)}\n            label=\"Cases\"\n            labelProps={{\n              fill: \"#FFF\",\n              textAnchor: \"middle\",\n              fontSize: 12,\n              fontFamily: \"Arial\"\n            }}\n            stroke=\"#FFF\"\n            tickStroke=\"#FFF\"\n            tickLabelProps={(value, index) => ({\n              fill: \"#FFF\",\n              textAnchor: \"end\",\n              fontSize: 10,\n              fontFamily: \"Arial\",\n              dx: \"-0.25em\",\n              dy: \"0.25em\"\n            })}\n            tickComponent={({ formattedValue, ...tickProps }) => (\n              <text {...tickProps}>{formattedValue}</text>\n            )}\n          />\n          <AxisBottom\n            top={height - margin}\n            left={0}\n            scale={xScale}\n            numTicks={numTicksForWidth(width)}\n            label=\"Date\"\n          >\n            {axis => {\n              const tickLabelSize = 10;\n              const tickRotate = 45;\n              const tickColor = \"#FFF\";\n              const axisCenter =\n                (axis.axisToPoint.x - axis.axisFromPoint.x) / 2;\n              return (\n                <g className=\"my-custom-bottom-axis\">\n                  {axis.ticks.map((tick, i) => {\n                    const tickX = tick.to.x;\n                    const tickY = tick.to.y + tickLabelSize + axis.tickLength;\n                    return (\n                      <Group\n                        key={`vx-tick-${tick.value}-${i}`}\n                        className={\"vx-axis-tick\"}\n                      >\n                        <Line\n                          from={tick.from}\n                          to={tick.to}\n                          stroke={tickColor}\n                        />\n                        <text\n                          transform={`translate(${tickX}, ${tickY}) rotate(${tickRotate})`}\n                          fontSize={tickLabelSize}\n                          textAnchor=\"middle\"\n                          fill={tickColor}\n                        >\n                          {tick.formattedValue}\n                        </text>\n                      </Group>\n                    );\n                  })}\n                  <text\n                    textAnchor=\"middle\"\n                    transform={`translate(${axisCenter}, 50)`}\n                    fontSize=\"8\"\n                    fill=\"#FFF\"\n                  >\n                    {axis.label}\n                  </text>\n                </g>\n              );\n            }}\n          </AxisBottom>\n        </Group>\n      </svg>\n    );\n  }\n\n  /**\n   * Renders a single value of the array returned by db.exec(...) as a table\n   */\n  renderResult({ columns, values }) {\n    let truncated = false;\n    let length = values.length;\n    if (values.length > 1000) {\n      truncated = true;\n      values = values.slice(0, 1000);\n    }\n    return (\n      <div>\n        {truncated && (\n          <div>{`truncated: 1,000 of ${length} shown and graph skipped.`}</div>\n        )}\n        <table>\n          <thead>\n            <tr>\n              {columns.map(columnName => (\n                <td>{columnName}</td>\n              ))}\n            </tr>\n          </thead>\n\n          <tbody>\n            {values.map((\n              row // values is an array of arrays representing the results of the query\n            ) => (\n              <tr>\n                {row.map(value => (\n                  <td>{value}</td>\n                ))}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n\n  render() {\n    let { db, err, results, loading } = this.state;\n    const parsed = queryString.parse(window.location.search);\n    if (loading) return <pre>Loading...</pre>;\n    return (\n      <div className=\"App\">\n        {/* <textarea\n          rows={3}\n          defaultValue={parsed[\"q\"]}\n          onChange={e => this.inputDebounce(e.target.value, true)}\n          placeholder=\"Enter some SQL. Try “SELECT * FROM covid_counties;”\"\n        ></textarea> */}\n        <pre className=\"error\">{(err || \"\").toString()}</pre>\n        {this.graphSelector()}\n        {results && (\n          <ParentSize className=\"graph-container\">\n            {({ width: w, height: h }) => {\n              return results.map(d => this.graphData(d, w, 500));\n            }}\n          </ParentSize>\n        )}\n\n        {/* <pre>\n          {results\n            ? results.map(this.renderResult) // results contains one object per select statement in the query\n            : \"\"}\n        </pre> */}\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}