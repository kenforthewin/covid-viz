{"version":3,"sources":["App.js","index.js"],"names":["App","React","Component","constructor","super","this","state","loading","db","err","results","componentDidMount","initSqlJs","then","SQL","setState","Database","syncData","catch","exec","d3","data","i","j","length","strValues","slice","map","d","date","county","fips","cases","deaths","join","q","console","log","sql","e","renderResult","columns","values","columnName","row","value","render","className","onChange","target","placeholder","toString","rootElement","document","getElementById","ReactDOM","StrictMode"],"mappings":"iPAIe,MAAMA,UAAYC,IAAMC,UACrCC,cACEC,QACAC,KAAKC,MAAQ,CAAEC,SAAS,EAAMC,GAAI,KAAMC,IAAK,KAAMC,QAAS,MAG9DC,oBAKEC,MACGC,KAAKC,IACJT,KAAKU,SAAS,CAAEP,GAAI,IAAIM,EAAIE,UAAc,KACxCX,KAAKY,eAGRC,MAAMT,GAAOJ,KAAKU,SAAS,CAAEN,SAGlCQ,WACEZ,KAAKc,KAAK,wCACVd,KAAKc,KACH,kHAGFC,IACE,kFACAP,KAAKQ,IAEL,IAAK,IAAIC,EAAI,EAAGC,EAAIF,EAAKG,OAAQF,EAAIC,EAAGD,GAD5B,IACwC,CAClD,IAMIG,EANSJ,EACVK,MAAMJ,EAAGA,EAHF,KAIPK,IACCC,GAAC,YACMA,EAAEC,KADR,cACkBD,EAAEE,OADpB,cACgCF,EAAEtB,MADlC,aAC4CsB,EAAEG,KAD9C,YACsDH,EAAEI,MADxD,YACiEJ,EAAEK,OADnE,MAGkBC,KAAK,OACxBC,EAAC,yFAAqFV,EAArF,KACLW,QAAQC,IAAIF,GACZ9B,KAAKc,KAAKgB,GACV9B,KAAKU,SAAS,CAAER,SAAS,OAK/BY,KAAKmB,GACH,IAAI5B,EAAU,KACZD,EAAM,KACR,IAGEC,EAAUL,KAAKC,MAAME,GAAGW,KAAKmB,GAC7B,MAAOC,GAEP9B,EAAM8B,EAERlC,KAAKU,SAAS,CAAEL,UAASD,QAM3B+B,cAAa,QAAEC,EAAF,OAAWC,IACtB,OACE,+BACE,+BACE,4BACGD,EAAQd,IAAIgB,GACX,4BAAKA,MAKX,+BACGD,EAAOf,IACNiB,GAEA,4BACGA,EAAIjB,IAAIkB,GACP,4BAAKA,QASnBC,SAAU,IAAD,EAC6BzC,KAAKC,MAA/BG,GADH,EACDD,GADC,EACGC,KAAKC,EADR,EACQA,QACf,OAFO,EACiBH,QACJ,2CAElB,yBAAKwC,UAAU,OACb,yCAEA,8BACEC,SAAUT,GAAKlC,KAAKc,KAAKoB,EAAEU,OAAOJ,OAClCK,YAAY,kEAGd,yBAAKH,UAAU,UAAUtC,GAAO,IAAI0C,YAEpC,6BACGzC,EACGA,EAAQiB,IAAItB,KAAKmC,cACjB,MCzGd,MAAMY,EAAcC,SAASC,eAAe,QAC5CC,IAAST,OACP,kBAAC,IAAMU,WAAP,KACE,kBAAC,EAAD,OAEFJ,I","file":"static/js/main.740cc2bc.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./styles.css\";\nimport initSqlJs from \"sql.js\";\nimport * as d3 from \"d3-fetch\";\nexport default class App extends React.Component {\n  constructor() {\n    super();\n    this.state = { loading: true, db: null, err: null, results: null };\n  }\n\n  componentDidMount() {\n    // sql.js needs to fetch its wasm file, so we cannot immediately instantiate the database\n    // without any configuration, initSqlJs will fetch the wasm files directly from the same path as the js\n    // see ../config-overrides.js\n\n    initSqlJs()\n      .then(SQL => {\n        this.setState({ db: new SQL.Database() }, () => {\n          this.syncData();\n        });\n      })\n      .catch(err => this.setState({ err }));\n  }\n\n  syncData() {\n    this.exec(\"DROP TABLE IF EXISTS covid_counties;\");\n    this.exec(\n      \"CREATE TABLE covid_counties (date TEXT, county TEXT, state TEXT, fips INTEGER, cases INTEGER, deaths INTEGER);\"\n    );\n\n    d3.csv(\n      \"https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv\"\n    ).then(data => {\n      let chunk = 100;\n      for (let i = 0, j = data.length; i < j; i += chunk) {\n        let values = data\n          .slice(i, i + chunk)\n          .map(\n            d =>\n              `(\"${d.date}\",\"${d.county}\",\"${d.state}\",${d.fips},${d.cases},${d.deaths})`\n          );\n        let strValues = values.join(\",\\n\");\n        let q = `INSERT INTO covid_counties (date, county, state, fips, cases, deaths)\\nVALUES\\n${strValues};`;\n        console.log(q);\n        this.exec(q);\n        this.setState({ loading: false });\n      }\n    });\n  }\n\n  exec(sql) {\n    let results = null,\n      err = null;\n    try {\n      // The sql is executed synchronously on the UI thread.\n      // You may want to use a web worker\n      results = this.state.db.exec(sql); // an array of objects is returned\n    } catch (e) {\n      // exec throws an error when the SQL statement is invalid\n      err = e;\n    }\n    this.setState({ results, err });\n  }\n\n  /**\n   * Renders a single value of the array returned by db.exec(...) as a table\n   */\n  renderResult({ columns, values }) {\n    return (\n      <table>\n        <thead>\n          <tr>\n            {columns.map(columnName => (\n              <td>{columnName}</td>\n            ))}\n          </tr>\n        </thead>\n\n        <tbody>\n          {values.map((\n            row // values is an array of arrays representing the results of the query\n          ) => (\n            <tr>\n              {row.map(value => (\n                <td>{value}</td>\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    );\n  }\n\n  render() {\n    let { db, err, results, loading } = this.state;\n    if (loading) return <pre>Loading...</pre>;\n    return (\n      <div className=\"App\">\n        <h1>Covid SQL</h1>\n\n        <textarea\n          onChange={e => this.exec(e.target.value)}\n          placeholder=\"Enter some SQL. Try “SELECT * FROM covid_counties;”\"\n        ></textarea>\n\n        <pre className=\"error\">{(err || \"\").toString()}</pre>\n\n        <pre>\n          {results\n            ? results.map(this.renderResult) // results contains one object per select statement in the query\n            : \"\"}\n        </pre>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}