{"version":3,"sources":["App.js","index.js"],"names":["App","React","Component","constructor","super","this","state","loading","db","err","results","states","counties","stateValue","countyValue","dates","dateAfter","dateBefore","scale","componentDidMount","initSqlJs","then","SQL","setState","Database","syncData","catch","exec","d3Fetch","data","i","j","length","strValues","slice","map","d","date","county","fips","cases","deaths","join","q","values","p","queryString","parse","window","location","search","console","log","parsed","JSON","getCounties","qFromSelects","inputDebounce","sql","setUrl","clearTimeout","debounce","setTimeout","e","encodeURIComponent","history","replaceState","handleStateChange","event","value","target","handleCountyChange","handleDateAfterChange","handleDateBeforeChange","handleScaleChange","whereClauses","push","whereClause","enc","json","stringify","after","before","graphSelector","class","for","name","onChange","s","graphData","columns","width","height","xIndex","indexOf","yIndex","yDeathsIndex","numTicksForWidth","parseDate","d3Time","x","y","xMax","yMax","xScale","scaleTime","range","domain","extent","xDeathsScale","scaleBand","yScale","scaleLinear","max","scaleLog","fill","rx","Grid","top","left","stroke","numTicksRows","numTicksColumns","Group","key","barWidth","bandwidth","barHeight","yDeaths","barX","barY","Bar","LinePath","strokeWidth","curve","curveMonotoneX","AxisLeft","hideZero","numTicks","label","tickFormat","d3Format","labelProps","textAnchor","fontSize","fontFamily","tickStroke","tickLabelProps","index","dx","dy","tickComponent","formattedValue","tickProps","AxisBottom","axis","axisCenter","axisToPoint","axisFromPoint","className","ticks","tick","tickX","to","tickY","tickLength","Line","from","transform","renderResult","truncated","columnName","row","render","toString","ParentSize","w","h","rootElement","document","getElementById","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.00e8cba4.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./styles.css\";\nimport initSqlJs from \"sql.js\";\nimport * as d3Fetch from \"d3-fetch\";\nimport queryString from \"query-string\";\nimport { Group } from \"@vx/group\";\nimport { Grid } from \"@vx/grid\";\nimport { AxisLeft, AxisBottom } from \"@vx/axis\";\nimport { LinePath, Line, Bar } from \"@vx/shape\";\nimport { curveMonotoneX } from \"@vx/curve\";\nimport { scaleTime, scaleLinear, scaleBand, scaleLog } from \"@vx/scale\";\nimport { ParentSize } from \"@vx/responsive\";\n\nimport { extent, max, min } from \"d3-array\";\nimport * as d3Time from \"d3-time-format\";\nimport * as d3Format from \"d3-format\";\n\nexport default class App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      loading: true,\n      db: null,\n      err: null,\n      results: null,\n      states: [],\n      counties: [],\n      stateValue: \"USA (all states)\",\n      countyValue: null,\n      dates: [],\n      dateAfter: \"all\",\n      dateBefore: \"all\",\n      scale: \"linear\",\n    };\n  }\n\n  componentDidMount() {\n    // sql.js needs to fetch its wasm file, so we cannot immediately instantiate the database\n    // without any configuration, initSqlJs will fetch the wasm files directly from the same path as the js\n    // see ../config-overrides.js\n\n    initSqlJs()\n      .then((SQL) => {\n        this.setState({ db: new SQL.Database() }, () => {\n          this.syncData();\n        });\n      })\n      .catch((err) => this.setState({ err }));\n  }\n\n  syncData() {\n    this.exec(\"DROP TABLE IF EXISTS covid_counties;\");\n    this.exec(\n      \"CREATE TABLE covid_counties (date TEXT, county TEXT, state TEXT, fips INTEGER, cases INTEGER, deaths INTEGER);\"\n    );\n\n    d3Fetch\n      .csv(\n        \"https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv\"\n      )\n      .then((data) => {\n        let chunk = 100;\n        for (let i = 0, j = data.length; i < j; i += chunk) {\n          let values = data\n            .slice(i, i + chunk)\n            .map(\n              (d) =>\n                `(\"${d.date}\",\"${d.county}\",\"${d.state}\",${d.fips || 0},${\n                  d.cases\n                },${d.deaths})`\n            );\n\n          let strValues = values.join(\",\\n\");\n          let q = `INSERT INTO covid_counties (date, county, state, fips, cases, deaths)\\nVALUES\\n${strValues};`;\n          this.exec(q);\n        }\n\n        let results = this.state.db.exec(\n          \"SELECT DISTINCT state FROM covid_counties ORDER BY state\"\n        );\n        let states = results[0].values;\n        results = this.state.db.exec(\n          \"SELECT DISTINCT date FROM covid_counties ORDER BY date\"\n        );\n        let dates = results[0].values;\n        const p = queryString.parse(window.location.search);\n        console.log(p[\"json\"]);\n        let parsed = p[\"json\"] ? JSON.parse(p[\"json\"]) : {};\n        let counties = [];\n        let stateValue = parsed[\"state\"] || \"USA (all states)\";\n        if (stateValue !== \"USA (all states)\") {\n          counties = this.getCounties(stateValue);\n        }\n        this.setState(\n          {\n            loading: false,\n            states,\n            dates,\n            stateValue: parsed[\"state\"] || \"USA (all states)\",\n            countyValue: parsed[\"county\"] || null,\n            dateAfter: parsed[\"after\"] || \"all\",\n            dateBefore: parsed[\"before\"] || \"all\",\n            scale: parsed[\"scale\"] || \"linear\",\n            counties,\n          },\n          () => {\n            this.qFromSelects();\n          }\n        );\n        // const parsed = queryString.parse(window.location.search);\n        // if (parsed[\"q\"]) {\n        //   this.exec(parsed[\"q\"]);\n        // } else {\n\n        // }\n      });\n  }\n\n  inputDebounce(sql, setUrl = false) {\n    clearTimeout(this.debounce);\n    this.debounce = setTimeout(() => {\n      this.exec(sql, setUrl);\n    }, 500);\n  }\n\n  exec(sql, setUrl = false) {\n    let results = null,\n      err = null;\n    try {\n      // The sql is executed synchronously on the UI thread.\n      // You may want to use a web worker\n      results = this.state.db.exec(sql); // an array of objects is returned\n    } catch (e) {\n      // exec throws an error when the SQL statement is invalid\n      err = e;\n    }\n    this.setState({ results, err }, () => {\n      if (setUrl) {\n        let q = encodeURIComponent(sql);\n        window.history.replaceState(null, \"\", `?q=${q}`);\n      }\n    });\n  }\n\n  getCounties(state) {\n    let results = this.state.db.exec(\n      `SELECT DISTINCT county FROM covid_counties WHERE state=\"${state}\" ORDER BY county`\n    );\n    return results[0].values;\n  }\n\n  handleStateChange(event) {\n    let counties = [];\n    let value = event.target.value;\n    if (value !== \"USA (all states)\") {\n      counties = this.getCounties(value);\n    }\n    this.setState(\n      {\n        stateValue: event.target.value,\n        counties,\n        countyValue: \"All (entire state)\",\n      },\n      () => {\n        this.qFromSelects();\n      }\n    );\n  }\n\n  handleCountyChange(event) {\n    let value = event.target.value;\n    this.setState({ countyValue: event.target.value }, () => {\n      this.qFromSelects();\n    });\n  }\n\n  handleDateAfterChange(event) {\n    this.setState({ dateAfter: event.target.value }, () => {\n      this.qFromSelects();\n    });\n  }\n\n  handleDateBeforeChange(event) {\n    this.setState({ dateBefore: event.target.value }, () => {\n      this.qFromSelects();\n    });\n  }\n\n  handleScaleChange(event) {\n    this.setState({ scale: event.target.value }, () => {\n      this.qFromSelects();\n    });\n  }\n\n  qFromSelects() {\n    let whereClauses = [];\n    if (this.state.stateValue !== \"USA (all states)\") {\n      whereClauses.push(`state=\"${this.state.stateValue}\" `);\n      if (this.state.countyValue !== \"All (entire state)\") {\n        whereClauses.push(`county=\"${this.state.countyValue}\"`);\n      }\n    }\n    if (this.state.dateAfter !== \"all\") {\n      whereClauses.push(`date >= \"${this.state.dateAfter}\"`);\n    }\n    if (this.state.dateBefore !== \"all\") {\n      whereClauses.push(`date <= \"${this.state.dateBefore}\"`);\n    }\n    let whereClause =\n      whereClauses.length > 0 && `WHERE ${whereClauses.join(\" AND \")}`;\n    let q = `SELECT date, SUM(cases) AS cases, SUM(deaths) AS deaths FROM covid_counties ${whereClause} GROUP BY (date)`;\n    this.exec(q);\n\n    let enc = encodeURIComponent;\n    let json = JSON.stringify({\n      state: this.state.stateValue,\n      county: this.state.countyValue,\n      after: this.state.dateAfter,\n      before: this.state.dateBefore,\n      scale: this.state.scale,\n    });\n    window.history.replaceState(null, \"\", `?json=${enc(json)}`);\n  }\n\n  graphSelector() {\n    return (\n      <div class=\"selectors\">\n        <label for=\"state\">State</label>\n        <select\n          name=\"state\"\n          value={this.state.stateValue}\n          onChange={(e) => this.handleStateChange(e)}\n        >\n          <option value=\"USA (all states)\">USA (all states)</option>\n          {this.state.states.map((s) => (\n            <option value={s}>{s}</option>\n          ))}\n        </select>\n        <label for=\"county\">County</label>\n        <select\n          name=\"county\"\n          value={this.state.countyValue}\n          onChange={(e) => this.handleCountyChange(e)}\n        >\n          {this.state.stateValue !== \"USA (all states)\" && (\n            <option value=\"All (entire state)\">All (entire state)</option>\n          )}\n          {this.state.counties.map((s) => (\n            <option value={s}>{s}</option>\n          ))}\n        </select>\n        <label for=\"daterange\">Date range</label>\n        <select\n          name=\"daterange\"\n          value={this.state.dateAfter}\n          onChange={(e) => this.handleDateAfterChange(e)}\n        >\n          <option value=\"all\"> -- beginning date -- </option>\n          {this.state.dates.map((s) => (\n            <option value={s}>{s}</option>\n          ))}\n        </select>\n        <select\n          value={this.state.dateBefore}\n          onChange={(e) => this.handleDateBeforeChange(e)}\n        >\n          <option value=\"all\"> -- end date -- </option>\n          {this.state.dates.map((s) => (\n            <option value={s}>{s}</option>\n          ))}\n        </select>\n      </div>\n    );\n  }\n\n  graphData({ columns, values }, width, height) {\n    const xIndex = columns.indexOf(\"date\");\n    const yIndex = columns.indexOf(\"cases\");\n    const yDeathsIndex = columns.indexOf(\"deaths\");\n\n    // responsive utils for axis ticks\n    function numTicksForHeight(height) {\n      // if (height <= 300) return 3;\n      // if (300 < height && height <= 600) return 5;\n      // return 10;\n\n      return 2;\n    }\n\n    function numTicksForWidth(width) {\n      if (width <= 300) return 2;\n      if (300 < width && width <= 400) return 5;\n      return 10;\n    }\n\n    const parseDate = d3Time.timeParse(\"%Y-%m-%d\");\n    const x = (d) => parseDate(d[xIndex]);\n    const y = (d) => +d[yIndex];\n    const yDeaths = (d) => +d[yDeathsIndex];\n\n    // bounds\n    const margin = 60;\n    const xMax = width - margin - margin;\n    const yMax = height - margin - margin;\n    // scales\n    const xScale = scaleTime({\n      range: [0, xMax],\n      domain: extent(values, x),\n    });\n    const xDeathsScale = scaleBand({\n      range: [0, xMax],\n      domain: values.map(x),\n    });\n    const yScale =\n      this.state.scale === \"linear\"\n        ? scaleLinear({\n            range: [yMax, 0],\n            domain: [0, max(values, y)],\n          })\n        : scaleLog({\n            range: [yMax, 0],\n            domain: extent(values, y),\n          });\n    return (\n      <svg width={width} height={height}>\n        <rect\n          x={0}\n          y={0}\n          width={width}\n          height={height}\n          fill=\"#242424\"\n          rx={14}\n        />\n        <Grid\n          top={margin}\n          left={margin}\n          xScale={xScale}\n          yScale={yScale}\n          stroke=\"rgb(102, 102, 102)\"\n          width={xMax}\n          height={yMax}\n          numTicksRows={4}\n          numTicksColumns={numTicksForWidth(width)}\n        />\n        <Group top={margin} left={margin} key=\"deaths\">\n          {values.map((d, i) => {\n            const date = x(d);\n            const barWidth = xDeathsScale.bandwidth();\n            const barHeight = yMax - yScale(yDeaths(d));\n            const barX = xDeathsScale(date);\n            const barY = yMax - barHeight;\n            return (\n              <Bar\n                key={`bar-${i}`}\n                x={barX}\n                y={barY}\n                width={barWidth}\n                height={barHeight}\n                fill=\"rgba(23, 233, 217, .5)\"\n              />\n            );\n          })}\n        </Group>\n        <Group key={`lines-1`} top={margin} left={margin}>\n          <LinePath\n            data={values}\n            x={(d) => xScale(x(d))}\n            y={(d) => yScale(y(d))}\n            stroke={\"#ffffff\"}\n            strokeWidth={2}\n            curve={curveMonotoneX}\n          />\n        </Group>\n        <Group left={margin}>\n          <AxisLeft\n            top={margin}\n            left={0}\n            scale={yScale}\n            hideZero\n            numTicks={4}\n            label=\"Cases\"\n            tickFormat={d3Format.format(\"~s\")}\n            labelProps={{\n              fill: \"#FFF\",\n              textAnchor: \"middle\",\n              fontSize: 12,\n              fontFamily: \"Arial\",\n            }}\n            stroke=\"#FFF\"\n            tickStroke=\"#FFF\"\n            tickLabelProps={(value, index) => ({\n              fill: \"#FFF\",\n              textAnchor: \"end\",\n              fontSize: 10,\n              fontFamily: \"Arial\",\n              dx: \"-0.25em\",\n              dy: \"0.25em\",\n            })}\n            tickComponent={({ formattedValue, ...tickProps }) => (\n              <text {...tickProps}>{formattedValue}</text>\n            )}\n          />\n          <AxisBottom\n            top={height - margin}\n            left={0}\n            scale={xScale}\n            numTicks={numTicksForWidth(width)}\n            label=\"Date\"\n          >\n            {(axis) => {\n              const tickLabelSize = 10;\n              const tickRotate = 45;\n              const tickColor = \"#FFF\";\n              const axisCenter =\n                (axis.axisToPoint.x - axis.axisFromPoint.x) / 2;\n              return (\n                <g className=\"my-custom-bottom-axis\">\n                  {axis.ticks.map((tick, i) => {\n                    const tickX = tick.to.x;\n                    const tickY = tick.to.y + tickLabelSize + axis.tickLength;\n                    return (\n                      <Group\n                        key={`vx-tick-${tick.value}-${i}`}\n                        className={\"vx-axis-tick\"}\n                      >\n                        <Line\n                          from={tick.from}\n                          to={tick.to}\n                          stroke={tickColor}\n                        />\n                        <text\n                          transform={`translate(${tickX}, ${tickY}) rotate(${tickRotate})`}\n                          fontSize={tickLabelSize}\n                          textAnchor=\"middle\"\n                          fill={tickColor}\n                        >\n                          {tick.formattedValue}\n                        </text>\n                      </Group>\n                    );\n                  })}\n                  <text\n                    textAnchor=\"middle\"\n                    transform={`translate(${axisCenter}, 50)`}\n                    fontSize=\"8\"\n                    fill=\"#FFF\"\n                  >\n                    {axis.label}\n                  </text>\n                </g>\n              );\n            }}\n          </AxisBottom>\n        </Group>\n      </svg>\n    );\n  }\n\n  /**\n   * Renders a single value of the array returned by db.exec(...) as a table\n   */\n  renderResult({ columns, values }) {\n    let truncated = false;\n    let length = values.length;\n    if (values.length > 1000) {\n      truncated = true;\n      values = values.slice(0, 1000);\n    }\n    return (\n      <div>\n        {truncated && (\n          <div>{`truncated: 1,000 of ${length} shown and graph skipped.`}</div>\n        )}\n        <table>\n          <thead>\n            <tr>\n              {columns.map((columnName) => (\n                <td>{columnName}</td>\n              ))}\n            </tr>\n          </thead>\n\n          <tbody>\n            {values.map((\n              row // values is an array of arrays representing the results of the query\n            ) => (\n              <tr>\n                {row.map((value) => (\n                  <td>{value}</td>\n                ))}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n\n  render() {\n    let { db, err, results, loading } = this.state;\n    const parsed = queryString.parse(window.location.search);\n    if (loading) return <pre>Loading...</pre>;\n    return (\n      <div className=\"App\">\n        {/* <textarea\n          rows={3}\n          defaultValue={parsed[\"q\"]}\n          onChange={e => this.inputDebounce(e.target.value, true)}\n          placeholder=\"Enter some SQL. Try “SELECT * FROM covid_counties;”\"\n        ></textarea> */}\n        <pre className=\"error\">{(err || \"\").toString()}</pre>\n        {this.graphSelector()}\n        {results && (\n          <ParentSize className=\"graph-container\">\n            {({ width: w, height: h }) => {\n              return results.map((d) => this.graphData(d, w, 500));\n            }}\n          </ParentSize>\n        )}\n        <label for=\"scale\">Scale</label>\n        <select\n          name=\"scale\"\n          value={this.state.scale}\n          onChange={(e) => this.handleScaleChange(e)}\n        >\n          <option value=\"linear\">linear</option>\n          <option value=\"log\">log</option>\n        </select>\n\n        {/* <pre>\n          {results\n            ? results.map(this.renderResult) // results contains one object per select statement in the query\n            : \"\"}\n        </pre> */}\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}