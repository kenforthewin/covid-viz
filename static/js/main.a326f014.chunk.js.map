{"version":3,"sources":["App.js","index.js"],"names":["App","React","Component","constructor","super","this","state","loading","db","err","results","componentDidMount","initSqlJs","then","SQL","setState","Database","syncData","catch","exec","d3Fetch","data","i","j","length","strValues","slice","map","d","date","county","fips","cases","deaths","join","q","parsed","queryString","parse","window","location","search","inputDebounce","sql","setUrl","clearTimeout","debounce","setTimeout","e","encodeURIComponent","history","replaceState","graphData","columns","values","width","height","xIndex","indexOf","yIndex","numTicksForHeight","numTicksForWidth","parseDate","d3Time","x","y","xMax","yMax","console","log","extent","xScale","scaleTime","range","domain","yScale","scaleLinear","max","fill","rx","Grid","top","left","stroke","numTicksRows","numTicksColumns","Group","key","LinePath","strokeWidth","curve","curveMonotoneX","AxisLeft","scale","hideZero","numTicks","label","labelProps","textAnchor","fontSize","fontFamily","tickStroke","tickLabelProps","value","index","dx","dy","tickComponent","formattedValue","tickProps","AxisBottom","axis","axisCenter","axisToPoint","axisFromPoint","className","ticks","tick","tickX","to","tickY","tickLength","Line","from","transform","renderResult","truncated","columnName","row","render","rows","defaultValue","onChange","target","placeholder","toString","ParentSize","w","h","rootElement","document","getElementById","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.a326f014.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./styles.css\";\nimport initSqlJs from \"sql.js\";\nimport * as d3Fetch from \"d3-fetch\";\nimport queryString from \"query-string\";\nimport { Group } from \"@vx/group\";\nimport { Grid } from \"@vx/grid\";\nimport { AxisLeft, AxisBottom } from \"@vx/axis\";\nimport { LinePath, Line } from \"@vx/shape\";\nimport { curveMonotoneX } from \"@vx/curve\";\nimport { scaleTime, scaleLinear } from \"@vx/scale\";\nimport { ParentSize } from \"@vx/responsive\";\n\nimport { extent, max, min } from \"d3-array\";\nimport * as d3Time from \"d3-time-format\";\n\nexport default class App extends React.Component {\n  constructor() {\n    super();\n    this.state = { loading: true, db: null, err: null, results: null };\n  }\n\n  componentDidMount() {\n    // sql.js needs to fetch its wasm file, so we cannot immediately instantiate the database\n    // without any configuration, initSqlJs will fetch the wasm files directly from the same path as the js\n    // see ../config-overrides.js\n\n    initSqlJs()\n      .then(SQL => {\n        this.setState({ db: new SQL.Database() }, () => {\n          this.syncData();\n        });\n      })\n      .catch(err => this.setState({ err }));\n  }\n\n  syncData() {\n    this.exec(\"DROP TABLE IF EXISTS covid_counties;\");\n    this.exec(\n      \"CREATE TABLE covid_counties (date TEXT, county TEXT, state TEXT, fips INTEGER, cases INTEGER, deaths INTEGER);\"\n    );\n\n    d3Fetch\n      .csv(\n        \"https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv\"\n      )\n      .then(data => {\n        let chunk = 100;\n        for (let i = 0, j = data.length; i < j; i += chunk) {\n          let values = data\n            .slice(i, i + chunk)\n            .map(\n              d =>\n                `(\"${d.date}\",\"${d.county}\",\"${d.state}\",${d.fips || 0},${\n                  d.cases\n                },${d.deaths})`\n            );\n\n          let strValues = values.join(\",\\n\");\n          let q = `INSERT INTO covid_counties (date, county, state, fips, cases, deaths)\\nVALUES\\n${strValues};`;\n          this.exec(q);\n        }\n        this.setState({ loading: false });\n        const parsed = queryString.parse(window.location.search);\n        if (parsed[\"q\"]) {\n          this.exec(parsed[\"q\"]);\n        }\n      });\n  }\n\n  inputDebounce(sql, setUrl = false) {\n    clearTimeout(this.debounce);\n    this.debounce = setTimeout(() => {\n      this.exec(sql, setUrl);\n    }, 500);\n  }\n\n  exec(sql, setUrl = false) {\n    let results = null,\n      err = null;\n    try {\n      // The sql is executed synchronously on the UI thread.\n      // You may want to use a web worker\n      results = this.state.db.exec(sql); // an array of objects is returned\n    } catch (e) {\n      // exec throws an error when the SQL statement is invalid\n      err = e;\n    }\n    this.setState({ results, err }, () => {\n      if (setUrl) {\n        let q = encodeURIComponent(sql);\n        window.history.replaceState(null, \"\", `?q=${q}`);\n      }\n    });\n  }\n\n  graphData({ columns, values }, width, height) {\n    if (values.length > 10000) {\n      return null;\n    }\n    // console.log(values);\n    const xIndex = columns.indexOf(\"date\");\n    if (xIndex === -1) {\n      return <div>Add a `date` and `cases` column to graph the results.</div>;\n    }\n    const yIndex = columns.indexOf(\"cases\");\n    if (yIndex === -1) {\n      return <div>Add a `date` and `cases` column to graph the results.</div>;\n    }\n\n    // responsive utils for axis ticks\n    function numTicksForHeight(height) {\n      if (height <= 300) return 3;\n      if (300 < height && height <= 600) return 5;\n      return 10;\n    }\n\n    function numTicksForWidth(width) {\n      if (width <= 300) return 2;\n      if (300 < width && width <= 400) return 5;\n      return 10;\n    }\n\n    const parseDate = d3Time.timeParse(\"%Y-%m-%d\");\n    const x = d => parseDate(d[xIndex]);\n    const y = d => d[yIndex];\n    // bounds\n    const margin = 60;\n    const xMax = width - margin - margin;\n    const yMax = height - margin - margin;\n    // scales\n    console.log(extent(values, x));\n    const xScale = scaleTime({\n      range: [0, xMax],\n      domain: extent(values, x)\n    });\n    const yScale = scaleLinear({\n      range: [yMax, 0],\n      domain: [0, max(values, y)]\n    });\n    return (\n      <svg width={width} height={height}>\n        <rect\n          x={0}\n          y={0}\n          width={width}\n          height={height}\n          fill=\"#242424\"\n          rx={14}\n        />\n        <Grid\n          top={margin}\n          left={margin}\n          xScale={xScale}\n          yScale={yScale}\n          stroke=\"rgb(102, 102, 102)\"\n          width={xMax}\n          height={yMax}\n          numTicksRows={numTicksForHeight(height)}\n          numTicksColumns={numTicksForWidth(width)}\n        />\n        <Group key={`lines-1`} top={margin} left={margin}>\n          <LinePath\n            data={values}\n            x={d => xScale(x(d))}\n            y={d => yScale(y(d))}\n            stroke={\"#ffffff\"}\n            strokeWidth={2}\n            curve={curveMonotoneX}\n          />\n        </Group>\n        <Group left={margin}>\n          <AxisLeft\n            top={margin}\n            left={0}\n            scale={yScale}\n            hideZero\n            numTicks={numTicksForHeight(height)}\n            label=\"Cases\"\n            labelProps={{\n              fill: \"#FFF\",\n              textAnchor: \"middle\",\n              fontSize: 12,\n              fontFamily: \"Arial\"\n            }}\n            stroke=\"#FFF\"\n            tickStroke=\"#FFF\"\n            tickLabelProps={(value, index) => ({\n              fill: \"#FFF\",\n              textAnchor: \"end\",\n              fontSize: 10,\n              fontFamily: \"Arial\",\n              dx: \"-0.25em\",\n              dy: \"0.25em\"\n            })}\n            tickComponent={({ formattedValue, ...tickProps }) => (\n              <text {...tickProps}>{formattedValue}</text>\n            )}\n          />\n          <AxisBottom\n            top={height - margin}\n            left={0}\n            scale={xScale}\n            numTicks={numTicksForWidth(width)}\n            label=\"Date\"\n          >\n            {axis => {\n              const tickLabelSize = 10;\n              const tickRotate = 45;\n              const tickColor = \"#FFF\";\n              const axisCenter =\n                (axis.axisToPoint.x - axis.axisFromPoint.x) / 2;\n              return (\n                <g className=\"my-custom-bottom-axis\">\n                  {axis.ticks.map((tick, i) => {\n                    const tickX = tick.to.x;\n                    const tickY = tick.to.y + tickLabelSize + axis.tickLength;\n                    return (\n                      <Group\n                        key={`vx-tick-${tick.value}-${i}`}\n                        className={\"vx-axis-tick\"}\n                      >\n                        <Line\n                          from={tick.from}\n                          to={tick.to}\n                          stroke={tickColor}\n                        />\n                        <text\n                          transform={`translate(${tickX}, ${tickY}) rotate(${tickRotate})`}\n                          fontSize={tickLabelSize}\n                          textAnchor=\"middle\"\n                          fill={tickColor}\n                        >\n                          {tick.formattedValue}\n                        </text>\n                      </Group>\n                    );\n                  })}\n                  <text\n                    textAnchor=\"middle\"\n                    transform={`translate(${axisCenter}, 50)`}\n                    fontSize=\"8\"\n                  >\n                    {axis.label}\n                  </text>\n                </g>\n              );\n            }}\n          </AxisBottom>\n        </Group>\n      </svg>\n    );\n  }\n\n  /**\n   * Renders a single value of the array returned by db.exec(...) as a table\n   */\n  renderResult({ columns, values }) {\n    let truncated = false;\n    let length = values.length;\n    if (values.length > 1000) {\n      truncated = true;\n      values = values.slice(0, 1000);\n    }\n    return (\n      <div>\n        {truncated && (\n          <div>{`truncated: 1,000 of ${length} shown and graph skipped.`}</div>\n        )}\n        <table>\n          <thead>\n            <tr>\n              {columns.map(columnName => (\n                <td>{columnName}</td>\n              ))}\n            </tr>\n          </thead>\n\n          <tbody>\n            {values.map((\n              row // values is an array of arrays representing the results of the query\n            ) => (\n              <tr>\n                {row.map(value => (\n                  <td>{value}</td>\n                ))}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n\n  render() {\n    let { db, err, results, loading } = this.state;\n    const parsed = queryString.parse(window.location.search);\n    if (loading) return <pre>Loading...</pre>;\n    return (\n      <div className=\"App\">\n        <textarea\n          rows={3}\n          defaultValue={parsed[\"q\"]}\n          onChange={e => this.inputDebounce(e.target.value, true)}\n          placeholder=\"Enter some SQL. Try “SELECT * FROM covid_counties;”\"\n        ></textarea>\n\n        <pre className=\"error\">{(err || \"\").toString()}</pre>\n        {results && (\n          <ParentSize className=\"graph-container\">\n            {({ width: w, height: h }) => {\n              return results.map(d => this.graphData(d, w, 500));\n            }}\n          </ParentSize>\n        )}\n\n        <pre>\n          {results\n            ? results.map(this.renderResult) // results contains one object per select statement in the query\n            : \"\"}\n        </pre>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}